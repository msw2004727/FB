// /api/routes/npcTradeRoutes.js
const express = require('express');
const router = express.Router();
const admin = require('firebase-admin');
const { getMergedNpcProfile } = require('../npcHelpers');
const { getRawInventory, getRawNpcInventory } = require('../playerStateHelpers'); // 【核心修正】引入新的 getRawNpcInventory
const { getTradeSummaryPrompt } = require('../../prompts/tradeSummaryPrompt');
const { callAI, aiConfig } = require('../../services/aiService');
const { updateLibraryNovel, invalidateNovelCache, getMergedLocationData } = require('../worldStateHelpers');
const { processItemChanges } = require('../itemManager');


const db = admin.firestore();

/**
 * @route   GET /api/game/npc/start-trade/:npcName
 * @desc    開始與NPC交易，獲取雙方物品
 * @access  Private
 */
router.get('/start-trade/:npcName', async (req, res) => {
    const userId = req.user.id;
    const { npcName } = req.params;

    try {
        const [playerItems, npcProfile] = await Promise.all([
            getRawInventory(userId),
            getMergedNpcProfile(userId, npcName)
        ]);
        
        if (!npcProfile) {
            return res.status(404).json({ message: '找不到交易對象。' });
        }
        
        // 【核心修正】使用新的 getRawNpcInventory 函式來獲取NPC的完整物品
        const npcItems = await getRawNpcInventory(npcProfile);
        
        // 分離玩家的銀兩和其他物品
        const playerMoneyItem = playerItems.find(item => item.templateId === '銀兩');
        const playerMoney = playerMoneyItem ? playerMoneyItem.quantity : 0;
        const playerOtherItems = playerItems.filter(item => item.templateId !== '銀兩');

        // 分離NPC的銀兩和其他物品
        const npcMoneyItem = npcItems.find(item => item.templateId === '銀兩');
        const npcMoney = npcMoneyItem ? npcMoneyItem.quantity : 0;
        const npcOtherItems = npcItems.filter(item => item.templateId !== '銀兩');

        res.json({
            player: {
                money: playerMoney,
                items: playerOtherItems
            },
            npc: {
                money: npcMoney,
                items: npcOtherItems
            }
        });

    } catch (error) {
        console.error(`[交易系統] 與 ${npcName} 開始交易時出錯:`, error);
        res.status(500).json({ message: '準備交易時發生內部錯誤。' });
    }
});


/**
 * @route   POST /api/game/npc/confirm-trade
 * @desc    確認交易，處理物品轉移
 * @access  Private
 */
router.post('/confirm-trade', async (req, res) => {
    const userId = req.user.id;
    const username = req.user.username;
    const { tradeState, npcName, model } = req.body;

    if (!tradeState || !npcName) {
        return res.status(400).json({ message: '交易數據不完整。' });
    }

    const batch = db.batch();
    const userDocRef = db.collection('users').doc(userId);

    try {
        // 1. 處理玩家給予NPC的物品
        const playerGaveItems = tradeState.player.offer.items.map(item => ({ action: 'remove', itemName: item.name, quantity: item.quantity }));
        const playerGaveMoney = tradeState.player.offer.money || 0;
        if(playerGaveMoney > 0) playerGaveItems.push({ action: 'remove', itemName: '銀兩', quantity: playerGaveMoney });
        await processItemChanges(userId, playerGaveItems, batch);
        
        // 2. 處理NPC給予玩家的物品
        const npcGaveItems = tradeState.npc.offer.items.map(item => ({ action: 'add', itemName: item.name, quantity: item.quantity }));
        const npcGaveMoney = tradeState.npc.offer.money || 0;
        if(npcGaveMoney > 0) npcGaveItems.push({ action: 'add', itemName: '銀兩', quantity: npcGaveMoney });
        await processItemChanges(userId, npcGaveItems, batch, {}, npcName); // 來源是NPC

        // 3. 提交所有物品變更
        await batch.commit();

        // 4. 生成新的回合數據
        const lastSaveSnapshot = await db.collection('users').doc(userId).collection('game_saves').orderBy('R', 'desc').limit(1).get();
        if (lastSaveSnapshot.empty) {
            throw new Error('找不到玩家存檔，無法記錄交易回合。');
        }
        const lastRoundData = lastSaveSnapshot.docs[0].data();
        const longTermSummary = (await db.collection('users').doc(userId).collection('game_state').doc('summary').get()).data()?.text || '...';
        
        const tradeDetails = {
            ...tradeState,
            location: lastRoundData.LOC[0]
        };

        const summaryResult = await getTradeSummaryPrompt(username, npcName, tradeDetails, longTermSummary);

        const newRoundNumber = lastRoundData.R + 1;
        const newRoundData = {
            ...lastRoundData,
            R: newRoundNumber,
            story: summaryResult.story,
            EVT: summaryResult.evt,
            PC: `你與${npcName}完成了一筆交易。`,
            // 更新狀態
            internalPower: lastRoundData.internalPower,
            externalPower: lastRoundData.externalPower,
            lightness: lastRoundData.lightness,
            morality: lastRoundData.morality,
            money: (lastRoundData.money || 0) + (npcGaveMoney - playerGaveMoney)
        };
        
        await db.collection('users').doc(userId).collection('game_saves').doc(`R${newRoundNumber}`).set(newRoundData);
        await invalidateNovelCache(userId);
        updateLibraryNovel(userId, username).catch(err => console.error("背景更新圖書館失敗(交易):", err));
        
        res.json({
            message: '交易成功！',
            newRound: {
                story: newRoundData.story,
                roundData: newRoundData,
                suggestion: "交易完成，接下來做什麼？"
            }
        });
        
    } catch (error) {
        console.error(`[交易系統] 確認與 ${npcName} 的交易時出錯:`, error);
        res.status(500).json({ message: error.message || '交易過程中發生未知錯誤。' });
    }
});

module.exports = router;
