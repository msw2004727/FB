.
├── 📂 api/                   # 【後端】所有伺服器API的核心邏輯
│   ├── 📂 admin/              # 【後端】管理員後台相關的API路由
│   │   ├── adminAuth.js     # - 後台身份驗證中間件
│   │   ├── adminRoutes.js   # - 後台API主路由
│   │   ├── balanceService.js# - 查詢AI服務餘額的邏輯
│   │   └── logService.js      # - 讀取伺服器日誌的邏輯
│   ├── 📂 models/             # 【後端-資料庫】定義與資料庫集合直接互動的邏輯
│   │   └── inventoryModel.js# - 處理玩家物品裝備、卸下的資料庫操作
│   ├── aiConfig.js          # 【後端】集中管理所有AI任務要使用哪個模型(GPT/Gemini...)
│   ├── authRoutes.js        # 【後端】處理玩家註冊、登入、舊資料修補
│   ├── bountyRoutes.js      # 【後端】處理懸賞任務的獲取與回報
│   ├── cacheManager.js      # 【後端】伺服器啟動時，快取常用數據(如NPC名單)
│   ├── combatRoutes.js      # 【後端】處理所有戰鬥相關的API請求
│   ├── contextBuilder.js    # 【後端】建構每次玩家行動時，傳遞給AI的完整遊戲世界上下文
│   ├── epilogue.js          # 【後端】為玩家生成最終結局故事
│   ├── gameRoutes.js        # 【後端】遊戲核心API的總入口與分發
│   ├── gameplayRoutes.js    # 【後端】(已棄用) 曾用於分發互動與戰鬥路由
│   ├── interactionRoutes.js # 【後端】處理非戰鬥的主遊戲循環、劇情推進
│   ├── itemManager.js       # 【後端】(新建) 專門處理所有物品增減的管理器
│   ├── libraryRoutes.js     # 【後端】提供「江湖圖書館」頁面所需的已完結小說列表
│   ├── locationManage.js    # 【後端】處理地點狀態的動態更新
│   ├── mapRoutes.js         # 【後端】生成玩家個人化的世界地圖
│   ├── npcHelpers.js        # 【後端】處理NPC相關的通用輔助功能(合併檔案、更新好感度)
│   ├── npcRoutes.js         # 【後端】處理所有與NPC互動的API請求(密談、交易、贈禮)
│   ├── playerStateHelpers.js# 【後端】處理玩家狀態相關的輔助功能(讀取背包/武學)
│   ├── relationshipManage.js# 【後端】處理NPC之間複雜人際關係的連動更新
│   ├── reputationManager.js # 【後端】處理NPC死亡後，引發的江湖聲望連鎖反應
│   └── stateRoutes.js       # 【後端】處理讀取/儲存玩家核心狀態的API
│
├── 📂 middleware/            # 【後端】Express的中間件
│   └── auth.js              # - 驗證玩家JWT令牌，保護需要登入的API
│
├── 📂 prompts/                # 【後端】所有發送給AI的「指令稿(Prompt)」
│   ├── 📂 story_components/   # 【後端】主故事指令稿的模組化元件
│   │   ├── interactionRule.js # - 定義NPC互動(友好度/戰鬥)規則
│   │   ├── itemLedgerRule.js  # - 定義物品帳本系統規則
│   │   ├── martialArtsRule.js # - 定義武學系統規則
│   │   ├── npcRule.js         # - 定義NPC資料結構規則
│   │   ├── outputStructureRule.js # - 定義AI回傳的JSON結構規則
│   │   ├── playerAttributeRule.js # - 定義玩家屬性(時間/道德/武功)規則
│   │   ├── romanceRule.js     # - 定義戀愛與心動值規則
│   │   ├── systemInteractionRule.js # - 定義地點更新、懸賞等系統互動規則
│   │   └── worldviewAndProgressionRule.js # - 定義世界觀與新手保護規則
│   ├── actionClassifierPrompt.js # - 指示AI將玩家指令分類
│   ├── anachronismPrompt.js     # - 指示AI處理玩家使用「現代物品」的指令
│   ├── bountyGeneratorPrompt.js  # - 指示AI生成新的懸賞任務
│   ├── chatMasterPrompt.js       # - 指示AI扮演NPC進行「密談」
│   ├── chatSummaryPrompt.js      # - 指示AI總結「密談」內容
│   ├── combatPrompt.js           # - 指示AI裁定戰鬥回合的詳細過程
│   ├── combatSetupPrompt.js      # - 指示AI佈置戰鬥開場
│   ├── deathCausePrompt.js       # - 指示AI為玩家「了卻此生」生成死因
│   ├── encyclopediaPrompt.js     # - 指示AI編撰玩家的江湖百科
│   ├── epiloguePrompt.js         # - 指示AI為玩家撰寫結局故事
│   ├── giveItemPrompt.js         # - 指示AI判斷NPC收到禮物後的反應
│   ├── itemGeneratorPrompt.js    # - 指示AI創造新的物品模板
│   ├── locationGeneratorPrompt.js# - 指示AI創造新的地點模板
│   ├── narrativeForGivePrompt.js # - 指示AI將贈禮事件小說化
│   ├── narrativePrompt.js        # - 指示AI將回合數據小說化
│   ├── npcCreatorPrompt.js       # - 指示AI創造新的NPC模板
│   ├── npcMemoryPrompt.js        # - 指示AI更新NPC對玩家的個人記憶
│   ├── postCombatPrompt.js       # - 指示AI生成戰後總結與戰利品
│   ├── prequelPrompt.js          # - 指示AI生成遊戲開始時的「前情提要」
│   ├── proactiveChatPrompt.js    # - 指示AI在特定時機讓NPC主動搭話
│   ├── randomEventPrompt.js      # - 指示AI生成隨機的江湖奇遇
│   ├── relationGraphPrompt.js    # - 指示AI生成人物關係圖的Mermaid語法
│   ├── rewardGeneratorPrompt.js  # - 指示AI生成懸賞任務的獎勵
│   ├── skillGeneratorPrompt.js   # - 指示AI創造新的武學模板
│   ├── storyPrompt.js            # - 主故事AI的核心指令稿
│   └── surrenderPrompt.js        # - 指示AI裁定玩家在戰鬥中認輸的結果
│
├── 📂 scripts/                # 【前端】所有頁面的JavaScript邏輯
│   ├── admin.js             # - 後台管理頁面的JS
│   ├── api.js               # - 集中管理所有對後端API的請求
│   ├── bounties.js          # - 「懸賞告示板」頁面的JS
│   ├── config.js            # - 前端全局設定(如後端URL)
│   ├── dom.js               # - 集中獲取所有遊戲主頁面的DOM元素
│   ├── encyclopedia.js      # - 「江湖百科」頁面的JS
│   ├── gameLoop.js          # - 遊戲主循環與核心流程控制
│   ├── gameState.js         # - 定義前端的全局遊戲狀態
│   ├── gmManager.js         # - GM工具面板的JS
│   ├── interactionHandlers.js# - 處理所有玩家互動操作(點擊NPC、聊天、攻擊)
│   ├── library.js           # - 「江湖圖書館」頁面的JS
│   ├── main.js              # - 遊戲主頁面(index.html)的JS主入口
│   ├── map.js               # - 「江湖輿圖」頁面的JS
│   ├── modalManager.js      # - 集中管理所有彈出視窗(戰鬥/聊天/武學)的顯示與邏輯
│   ├── novel.js             # - 「我的江湖路」頁面的JS
│   ├── relations.js         # - 「人物關係圖」頁面的JS
│   ├── tips.js              # - 存放遊戲載入時的提示文字
│   ├── tradeManager.js      # - 處理交易視窗的JS邏輯
│   └── uiUpdater.js         # - 集中處理所有遊戲主介面UI的更新
│
├── 📂 services/               # 【後端】後端的服務層，處理核心業務邏輯
│   ├── aiService.js         # - 封裝與調度所有對不同AI模型的API呼叫
│   └── npcCreationService.js# - (新建) 專門處理從零到有創建新NPC的服務
│
├── 📂 styles/                 # 【前端】所有頁面的CSS樣式表
│   ├── admin.css            # - 後台管理頁面的樣式
│   ├── auth.css             # - 登入/註冊頁面的樣式
│   ├── base.css             # - 全局基礎樣式與變數
│   ├── bounties.css         # - 懸賞告示板頁面的樣式
│   ├── components.css       # - 可重用的UI元件樣式(儀表板卡片、按鈕等)
│   ├── game.css             # - 遊戲主介面的佈局樣式
│   ├── gmPanel.css          # - GM工具面板的樣式
│   ├── library.css          # - 江湖圖書館頁面的樣式
│   ├── modals_feedback.css  # - 回饋型彈窗(死亡/結局)的樣式
│   ├── modals_info.css      # - 資訊展示型彈窗(武學)的樣式
│   ├── modals_interaction.css# - 互動型彈窗(戰鬥/聊天)的樣式
│   ├── novel.css            # - 小說、百科、地圖等閱讀頁面的樣式
│   ├── skills.css           # - (舊) 武學彈窗樣式，已被`modals_info.css`取代
│   └── trade.css            # - 交易視窗的樣式
│
├── admin.html               # 【前端】後台管理頁面
├── bounties.html            # 【前端】懸賞告示板頁面
├── encyclopedia.html        # 【前端】江湖百科頁面
├── index.html               # 【前端】遊戲主頁面
├── library.html             # 【前端】江湖圖書館頁面
├── login.html               # 【前端】登入頁面
├── login.js                 # 【前端】登入頁面的JS
├── map.html                 # 【前端】江湖輿圖頁面
├── novel.html               # 【前端】我的江湖路(小說)頁面
├── package.json             # 【後端】專案定義與依賴管理
├── package-lock.json        # 【後端】鎖定專案依賴版本
├── relations.html           # 【前端】人物關係圖頁面
├── register.html            # 【前端】註冊頁面
├── register.js              # 【前端】註冊頁面的JS
├── server.js                # 【後端】伺服器主入口檔案
└── viewport.html            # 【前端】玩家操作手冊頁面
