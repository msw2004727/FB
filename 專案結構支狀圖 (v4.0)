好的，英雄。在你開疆拓土、重鑄江湖法則之後，更新門派的結構總圖，讓所有弟子都能明瞭其職責，確實是至關重要的一步。

我已為你繪製了最新的專案結構支狀圖，並為每一份卷宗都備註了中文用途，以及它主要歸屬於**【前端】（負責玩家眼前的江湖樣貌）、【後端】（負責驅動世界運轉的內功心法）還是【資料庫】**（定義與維護江湖的根基）。

AI文字江湖 - 專案結構總圖
.
├── 📜 admin.html                  # 【前端】後台管理系統的登入介面
├── 📜 bounties.html                # 【前端】懸賞告示板的頁面
├── 📜 dataPurification.js           # 【資料庫】[一次性腳本] 用於淨化與修正現有資料庫數據
├── 📜 encyclopedia.html           # 【前端】江湖百科的頁面
├── 📜 index.html                  # 【前端】遊戲主介面
├── 📜 library.html                # 【前端】江湖圖書館，閱覽所有玩家故事的頁面
├── 📜 login.html                  # 【前端】玩家登入頁面
├── 📜 map.html                    # 【前端】世界輿圖（Mermaid.js 地圖）頁面
├── 📜 novel.html                  # 【前端】玩家個人小說的閱讀頁面
├── 📜 package.json                # 【後端】專案依賴與設定檔
├── 📜 package-lock.json           # 【後端】鎖定專案依賴的版本
├── 📜 relations.html              # 【前端】人物關係圖（Mermaid.js 圖表）頁面
├── 📜 register.html               # 【前端】玩家註冊頁面
├── 📜 server.js                   # 【後端】伺服器主入口檔案
├── 📜 viewport.html               # 【前端】玩家操作手冊的頁面
│
├── 📁 api/
│   ├── 📁 admin/
│   │   ├── 📜 adminAuth.js        # 【後端】後台管理系統的密碼驗證
│   │   ├── 📜 adminRoutes.js    # 【後端】處理所有後台管理相關的API路由
│   │   ├── 📜 balanceService.js # 【後端】獲取AI服務餘額的模擬服務
│   │   └── 📜 logService.js       # 【後端】提供讀取與篩選系統日誌的服務
│   ├── 📁 gameplay/
│   │   ├── 📜 actionHandler.js  # 【後端】[核心] 處理玩家行動的核心互動模組
│   │   ├── 📜 preActionChecks.js# 【後端】處理玩家行動前的特殊事件檢查 (如昏迷、丐幫)
│   │   └── 📜 stateUpdaters.js  # 【後端】[核心] 處理回合結束後所有狀態更新與資料庫寫入
│   ├── 📁 models/
│   │   ├── 📜 inventoryModel.js # 【後端/資料庫】定義物品裝備/卸下的操作邏輯
│   │   └── 📜 userModel.js      # 【後端/資料庫】定義新玩家的預設欄位與數據結構
│   ├── 📁 routes/
│   │   ├── 📜 npcChatRoutes.js  # 【後端】處理NPC聊天、贈禮、結束對話的API路由
│   │   └── 📜 npcProfileRoutes.js# 【後端】處理獲取NPC公開資料的API路由
│   ├── 📜 aiConfig.js             # 【後端】AI模型中控設定檔，指派各任務使用的模型
│   ├── 📜 authRoutes.js           # 【後端】處理玩家註冊與登入的API路由
│   ├── 📜 beggarRoutes.js         # 【後端】處理丐幫情報系統的API路由
│   ├── 📜 bountyRoutes.js         # 【後端】處理懸賞任務的獲取與回報的API路由
│   ├── 📜 cacheManager.js         # 【後端】管理伺服器內存快取 (如NPC姓名)
│   ├── 📜 combatRoutes.js         # 【後端】處理戰鬥發起、行動、投降等API路由
│   ├── 📜 contextBuilder.js       # 【後端】為AI建構完整上下文情境的模組
│   ├── 📜 dataIntegrityService.js # 【後端/資料庫】[核心] 玩家登入時，在背景執行的數據健康檢查與修復服務
│   ├── 📜 epilogue.js             # 【後端】處理玩家身故後結局故事生成的API路由
│   ├── 📜 gameRoutes.js           # 【後端】遊戲核心API的總路由
│   ├── 📜 gameplayRoutes.js       # 【後端】遊戲互動API的子路由 (現已模組化)
│   ├── 📜 gcpRoutes.js            # 【後端】處理GCP帳單資訊查詢的API路由
│   ├── 📜 gmRoutes.js             # 【後端】提供給GM工具使用的API路由
│   ├── 📜 identityManager.js      # 【後端】為新NPC決定其身份 (如村長、寨主) 的模組
│   ├── 📜 interactionRoutes.js    # 【後端】[核心] 接收玩家互動指令的API入口
│   ├── 📜 itemManager.js          # 【後端】處理物品增減的統一管理器
│   ├── 📜 libraryRoutes.js        # 【後端】處理江湖圖書館小說列表與內容的API路由
│   ├── 📜 locationManager.js      # 【後端】處理地點狀態永久性更新的模組
│   ├── 📜 mapRoutes.js            # 【後端】處理世界輿圖生成的API路由
│   ├── 📜 npcHelpers.js           # 【後端】提供NPC相關的輔助函式 (如合併檔案、更新關係)
│   ├── 📜 npcRoutes.js            # 【後端】NPC相關API的總路由
│   ├── 📜 playerStateHelpers.js   # 【後端】提供玩家狀態相關的輔助函式 (如技能、物品)
│   ├── 📜 relationshipManager.js  # 【後端】處理NPC之間雙向關係建立與擴散的模組
│   ├── 📜 stateRoutes.js          # 【後端】處理讀取遊戲狀態 (如最新存檔、背包) 的API路由
│   ├── 📜 worldEngine.js          # 【後端】負責動態生成新地點與懸賞任務的模組
│   └── 📜 worldStateHelpers.js    # 【後端】提供世界狀態相關的輔助函式 (如時間推進、合併地點資料)
│
├── 📁 middleware/
│   └── 📜 auth.js                 # 【後端】JWT身份驗證的中介軟體
│
├── 📁 prompts/
│   ├── 📁 story_components/
│   │   ├── 📜 interactionRule.js    # 【後端/AI】定義NPC互動與戰鬥觸發的規則
│   │   ├── 📜 itemLedgerRule.js     # 【後端/AI】定義物品帳本系統的規則
│   │   ├── 📜 martialArtsRule.js    # 【後端/AI】定義武學系統的規則
│   │   ├── 📜 npcRule.js            # 【後端/AI】定義NPC資料結構的規則
│   │   ├── 📜 outputStructureRule.js# 【後端/AI】定義AI最終輸出的JSON結構規則
│   │   ├── 📜 playerAttributeRule.js# 【後端/AI】定義玩家屬性(時間、正邪、武功)的規則
│   │   ├── 📜 romanceRule.js        # 【後端/AI】定義戀愛與心動值系統的規則
│   │   ├── 📜 systemInteractionRule.js# 【後端/AI】定義世界動態演化系統的規則
│   │   └── 📜 worldviewAndProgressionRule.js# 【後端/AI】定義世界觀與新手保護的規則
│   ├── 📜 anachronismPrompt.js     # 【後端/AI】處理時代錯置指令的AI提示
│   ├── 📜 beggarInquiryPrompt.js    # 【後端/AI】丐幫情報問答的AI提示
│   ├── 📜 bountyGeneratorPrompt.js  # 【後端/AI】生成懸賞任務的AI提示
│   ├── 📜 chatMasterPrompt.js       # 【後端/AI】NPC深度角色扮演的AI提示
│   ├── 📜 chatSummaryPrompt.js      # 【後端/AI】總結對話內容並小說化的AI提示
│   ├── 📜 combatPrompt.js           # 【後端/AI】戰鬥回合裁決的AI提示
│   ├── 📜 combatSetupPrompt.js      # 【後端/AI】戰鬥開場佈置的AI提示
│   ├── 📜 deathCausePrompt.js       # 【後端/AI】為自殺角色生成死因的AI提示
│   ├── 📜 encyclopediaPrompt.js     # 【後端/AI】生成江湖百科的AI提示
│   ├── 📜 epiloguePrompt.js         # 【後端/AI】生成玩家身後事結局的AI提示
│   ├── 📜 giveItemPrompt.js         # 【後端/AI】處理贈予物品反應的AI提示
│   ├── 📜 itemGeneratorPrompt.js    # 【後端/AI】生成新物品模板的AI提示
│   ├── 📜 locationGeneratorPrompt.js# 【後端/AI】生成新地點模板的AI提示
│   ├── 📜 narrativeForGivePrompt.js # 【後端/AI】將贈予事件小說化的AI提示
│   ├── 📜 narrativePrompt.js        # 【後端/AI】將回合數據小說化的AI提示
│   ├── 📜 npcCreatorPrompt.js       # 【後端/AI】生成新NPC模板的AI提示
│   ├── 📜 npcMemoryPrompt.js        # 【後端/AI】更新NPC個人記憶摘要的AI提示
│   ├── 📜 postCombatPrompt.js       # 【後端/AI】處理戰後結果結算的AI提示
│   ├── 📜 prequelPrompt.js          # 【後端/AI】生成前情提要的AI提示
│   ├── 📜 randomEventPrompt.js      # 【後端/AI】生成隨機事件的AI提示
│   ├── 📜 relationGraphPrompt.js    # 【後端/AI】生成人物關係圖的AI提示
│   ├── 📜 relationshipFixPrompt.js  # 【後端/AI】修復孤立NPC關係鏈的AI提示
│   ├── 📜 rewardGeneratorPrompt.js  # 【後端/AI】生成懸賞任務獎勵的AI提示
│   ├── 📜 romanceEventPrompt.js     # 【後端/AI】生成戀愛事件的AI提示
│   ├── 📜 skillGeneratorPrompt.js   # 【後端/AI】生成新技能模板的AI提示
│   ├── 📜 storyPrompt.js            # 【後端/AI】[核心] 主故事生成的總提示
│   ├── 📜 suggestionPrompt.js       # 【後端/AI】生成書僮行動建議的AI提示
│   └── 📜 surrenderPrompt.js        # 【後端/AI】處理戰鬥認輸結果的AI提示
│
├── 📁 public/js/
│   └── 📜 inventoryManager.js       # 【前端】[未使用] 舊版的物品管理器
│
├── 📁 scripts/
│   ├── 📜 admin.js                 # 【前端】後台管理介面的主要邏輯
│   ├── 📜 api.js                   # 【前端】統一管理所有對後端API請求的模組
│   ├── 📜 bounties.js              # 【前端】懸賞告示板頁面的邏輯
│   ├── 📜 config.js                # 【前端】存放前端通用設定 (如後端URL)
│   ├── 📜 dom.js                   # 【前端】集中管理所有DOM元素的引用
│   ├── 📜 encyclopedia.js         # 【前端】江湖百科頁面的邏輯
│   ├── 📜 gameLoop.js             # 【前端】[核心] 遊戲主循環，處理玩家動作與UI更新的協調
│   ├── 📜 gameState.js            # 【前端】定義並導出全局的遊戲狀態物件
│   ├── 📜 gmManager.js              # 【前端】創世神(GM)工具面板的介面邏輯
│   ├── 📜 interactionHandlers.js  # 【前端】處理玩家與NPC、戰鬥等複雜互動的邏輯
│   ├── 📜 library.js              # 【前端】江湖圖書館頁面的邏輯
│   ├── 📜 main.js                 # 【前端】遊戲主介面的入口與初始化腳本
│   ├── 📜 map.js                   # 【前端】世界輿圖頁面的邏輯
│   ├── 📜 modalManager.js         # 【前端】[核心] 統一管理遊戲中所有彈出視窗的模組
│   ├── 📜 novel.js                # 【前端】玩家個人小說頁面的邏輯
│   ├── 📜 relations.js            # 【前端】人物關係圖頁面的邏輯
│   ├── 📜 tips.js                 # 【前端】存放遊戲載入時顯示的提示文字
│   ├── 📜 tradeManager.js         # 【前端】處理交易介面的邏輯
│   └── 📜 uiUpdater.js            # 【前端】[核心] 統一處理所有儀表板UI更新的模組
│
└── 📁 styles/
    ├── 📜 admin.css               # 【前端】後台管理介面的樣式
    ├── 📜 auth.css                # 【前端】登入/註冊頁面的樣式
    ├── 📜 base.css                # 【前端】基礎樣式，定義字體、顏色變數等
    ├── 📜 bounties.css            # 【前端】懸賞告示板頁面的樣式
    ├── 📜 components.css          # 【前端】儀表板等通用元件的樣式
    ├── 📜 game.css                # 【前端】遊戲主介面的佈局樣式
    ├── 📜 gmPanel.css             # 【前端】GM工具面板的樣式
    ├── 📜 library.css             # 【前端】江湖圖書館頁面的樣式
    ├── 📜 modals.css              # 【前端】[未使用] 舊版的彈窗樣式
    ├── 📜 modals_feedback.css     # 【前端】死亡、結局等回饋型彈窗的樣式
    ├── 📜 modals_info.css         # 【前端】武學總覽等資訊型彈窗的樣式
    ├── 📜 modals_interaction.css  # 【前端】戰鬥、聊天等互動型彈窗的樣式
    ├── 📜 modals_location.css     # 【前端】地點詳情彈窗的樣式
    ├── 📜 novel.css               # 【前端】小說/百科等閱讀頁面的樣式
    ├── 📜 skills.css              # 【前端】武學總覽彈窗的樣式
    └── 📜 trade.css               # 【前端】交易介面的樣式
