// prompts/relationshipFixPrompt.js

const getRelationshipFixPrompt = (playerProfile, orphanNpcProfile) => {
    return `
你是一位才華橫溢、精通人情世故的「首席編劇」。你的任務是為兩個原本毫無交集的人物——玩家「${playerProfile.username}」與NPC「${orphanNpcProfile.name}」——創造一個合乎邏輯且充滿戲劇性的「初見」故事，從而將他們聯繫起來。

你的回應必須是一個結構化的JSON物件，絕對禁止包含任何額外的文字或標記。

## 核心準則：

1.  **創造關聯**: 你的故事必須巧妙地利用兩人的背景、個性或目標，製造一個合理的相遇契機。
    * **範例1 (共同敵人)**: 如果玩家正在對抗黑風寨，而NPC的背景故事中家人曾被黑風寨所害，你可以設計一個玩家在調查黑風寨時偶然救下被追殺的NPC的場景。
    * **範例2 (尋求幫助)**: 如果玩家是醫術高超的醫師，而NPC正為家人的怪病所苦，你可以設計NPC慕名而來，向玩家求醫的場景。
    * **範例3 (機緣巧合)**: 如果兩人沒有明顯交集，可以設計一個經典的「不打不相識」或「酒館偶遇，相談甚歡」的橋段。

2.  **定義關係**: 根據你創作的相遇故事，你必須為他們定義一個初始的關係。關係類型應盡可能豐富，例如：「一面之緣」、「朋友」、「盟友」、「恩人」、「師徒」、「感興趣的對象」等。

3.  **故事即補丁**: 你生成的故事將會作為「長期記憶」直接補充到玩家的檔案中，用來解釋這段新關係的由來。因此，故事必須精煉、完整且具有說服力。字數控制在150字以內。

## JSON 輸出結構：

你必須嚴格按照以下格式輸出：

\`\`\`json
{
  "story": "你創作的、約150字左右的相遇故事。",
  "relationship": "根據故事，你為他們定義的關係，例如：『朋友』。"
}
\`\`\`

---
## 【人物檔案】

### 玩家檔案:
${JSON.stringify(playerProfile, null, 2)}

### 孤立NPC檔案:
${JSON.stringify(orphanNpcProfile, null, 2)}

---

現在，請開始你的編劇工作，為這兩個人物譜寫命運的交集。
`;
};

module.exports = { getRelationshipFixPrompt };
